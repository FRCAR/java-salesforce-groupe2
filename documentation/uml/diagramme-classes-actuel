@startuml

package "pokemoncorp.src.referentiel"{

	class API {
		- {static} pokemons : HashMap<Integer,Pokemon>
		
		+ API()
		+ getAllPokemon() : HashMap<Integer, Pokemon>
		+ getPokemonByID(int id) : Pokemon
		+ updatePokemon(Pokemon pokemon, int addedExperience) : void
	}
	
	abstract Pokemon{
		- {static} nbPokemonCrees : int
		# id : final int
		# prenom : final String
		# type : final TypePokemon
		# experience : int
		# ptDeVieMax : final int
		# ptDeVie : int
		# attaque : final Attaque
		# nomClasse : final String
		
		+ getNbPokemonCrees() : int
		- setNbPokemonCrees(int nbPokemonCrees) :void
		- incrementNbPokemonCrees() : void
		+ Pokemon(String prenom, String nomClass, TypePokemon type, int ptVieMax, Attaque attaque)
		+ getId() : int
		+ getPrenom() : String
		+ getType() : TypePokemon
		+ getExperience() : int
		~ setExperience(int experience) : void
		+ getAttaque() : Attaque
		+ getptDeVieMax() : int
		+ getptDeVie() : int
		+ setptDeVie(int ptDeVie) : int
		+ resetPdtVie() : void
		+ getNomClasse() : String
		+ ajoutDegat(int degat) : void
		+ attaquePokemon(Pokemon pokemonCible) : void
		
	}

	class Salameche{
	
		~ Salameche(String Prenom)
	}

	class Racaillou{
		
		~ Racaillou(String Prenom)
	}

	class Roucoul{
	
		~Roucoul(String Prenom)
	}

	class Carapuce{

		~Carapuce(String Prenom)
	}

	abstract Attaque{
		# {static} tableBonus : final HashMap<TypePokemon, HashMap<TypePokemon,Integer>>
		# type : final TypePokemon
		# degats : final int
		# nomClasse : final String
		
		- {static} getTableBonus() : HashMap<TypePokemon, HashMap<TypePokemon, Integer>>
		~ Attaque(int degats, TypePokemon type, String nomClasse)
		+ getType() : TypePokemon
		+ getDegats() : int
		+ getNomClasse() : String
		+ getBonus(TypePokemon typePokemonCible) : int
	}

	class Plouf {
	
		~Plouf()
	}

	class Flameche {
		
		~Flameche()
	}

	class Battement {
		
		~Battement()
	}

	class Ecrasement {
		
		~Ecrasement()
	}
	
	enum TypePokemon{
	
	}
	
}

package "pokemoncorp.src.entrainement"{

	class Simulation{
	
		+ {static} main() : void
		- {static} displayAllPokemon() : void
		- {static} displayAllPokemonSortedByXP() : void
		- {static} displayPokemonByID() : void
		- {static} displayAllArene() : void
		- {static} lancerUnCombat() : void
		- {static} getPokemonById() : Pokemon
	}
	
	class Combat{
		- boolean tourDeCombat
	
		+ Combat(Pokemon pokemon1, Pokemon pokemon2, Arene arene)
		+ getpokemon1() : Pokemon
		+ getpokemon2() : Pokemon
		+ getArene() : Arene
		+ lancerCombat() : Pokemon
		- tourDeCombat() : boolean
	}

	abstract Arene{
		# nomClasse : final String
		
		+ Arene(String nomClasse)
		+ getNomClasse() : String
		+ {abstract} <<abstract>> effetDebutCombat(Pokemon pkA, Pokemon pkB) : void
		+ {abstract} <<abstract>> effetTourDeCombat(Pokemon pkA, Pokemon pkB) : void
	}

	class Prairie {
		
		+ Prairie()
		+ effetDebutCombat(Pokemon pkA, Pokemon pkB) : void
		+ effetTourDeCombat(Pokemon pkA, Pokemon pkB) : void
	}

	class Volcan {
	
		+ Volcan()
		+ effetDebutCombat(Pokemon pkA, Pokemon pkB) : void
		+ effetTourDeCombat(Pokemon pkA, Pokemon pkB) : void
	}

	class MareAcide {
		
		+ MareAcide()
		+ effetDebutCombat(Pokemon pkA, Pokemon pkB) : void
		+ effetTourDeCombat(Pokemon pkA, Pokemon pkB) : void
	}

}

API o--> "0,n" Pokemon
Pokemon <|-- Salameche
Pokemon <|-- Racaillou
Pokemon <|-- Roucoul
Pokemon <|-- Carapuce
Attaque <|-- Plouf
Attaque <|-- Flameche
Attaque <|-- Battement
Attaque <|-- Ecrasement
Pokemon *--> "1..1" Attaque

TypePokemon "1..1" <--o Attaque
TypePokemon "1..1" <--o Pokemon

Simulation *--> "0..n" Arene
Arene <|-- Prairie
Arene <|-- Volcan
Arene <|-- MareAcide

Simulation --> API
Simulation --> Combat
Combat o--> "1..1" Arene

Combat o--> "2..2" Pokemon


@enduml
